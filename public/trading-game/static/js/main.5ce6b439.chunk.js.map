{"version":3,"sources":["welcome/IntroText.js","welcome/PlayingTheGame.js","factories.js","constants.js","welcome/AboutShips.js","state0_places.js","imagesByType.js","welcome/AboutCargos.js","welcome/WelcomePage.js","styleConstants.js","place/ShipsForSale.js","shared_components/Cargo.js","place/CargosForSale.js","place/Chandler.js","place/FuelDepot.js","stateUtils.js","actions.js","place/PlacePanel.js","ship/Cash.js","ship/Crew.js","ship/Fuel.js","ship/Food.js","ship/Hold.js","ship/ShipPanel.js","ship/ShiplessPanel.js","TimeView.js","MapPanel.js","MobileMapPanel.js","MainPage.js","App.js","state0.js","tickHandler.js","rootReducer.js","index.js","gameSaver.js"],"names":["IntroText","react_default","a","createElement","PlayingTheGame","___nextId","Math","random","nextId","baseCargo","isForSale","isLoaded","shipId","labelForCargoType","oliveoil","coal","leopardwood","clockworks","kippers","fluff","shipyard","placeId","shipType","shipName","newShip","food","cargo","fuel","isFlyer","shipTypeName","basePrice","crewSize","maxFuel","speed","fuelPerMove","maxCargo","maxFood","alert","FLORIN_MARK","exampleShips","map","aboutShipsStyle","marginTop","shipTypeDataStyle","textAlign","border","borderRadius","margin","padding","maxWidth","tableStyle","ShipTypeData","_ref","ship","style","src","alt","AboutShips","AboutShips_ShipTypeData","key","basePrices","places","name","placeType","description","isFuelForSale","fuelPrice","isFoodForSale","foodPrice","x","y","prices","Object","objectSpread","imagesByType","fishboat","albionsteamclipper","enginebarge","silverzeppelin","steamturbinehovercraft","cargoTypes","cargosContainerStyle","display","flexWrap","cagoDisplayStyle","CargoDisplay","cargoType","AboutCargos","AboutCargos_CargoDisplay","wrapperStyle","background","welcomePageStyle","welcomeImageStyle","buttonStyle","color","fontSize","fontWeight","WelcomePage","hideWelcomePage","ticks","resetState","buttonText","textAligh","onClick","welcome_IntroText","welcome_PlayingTheGame","welcome_AboutShips","welcome_AboutCargos","sfsStyle","minHeight","paddingLeft","marginLeft","borderTopLeftRadius","borderBottomLeftRadius","ShipsForSaleComponent","shipsForSale","cash","buyShip","highlightBuyButton","myShipId","ShipForSale","canBuy","highlightedButtonStyle","normalButtonStyle","_ref2","height","width","paddingTop","textShadow","Cargo","empty","aCargo","price","enabled","cargoClicked","title","disabled","cargoLabel","cargoId","CargosForSaleComponent","hasShip","numberOfEmptyCargoBays","cargosForSale","buyCargo","shared_components_Cargo","Chandler","place","buyFood","myShip","foodGap","visualFoodGap","i","push","FuelDepot","buyFuel","fuelGap","visualFuelGap","getShipById","state","ships","length","getMyShip","getPlaceById","id","getCurrentPlace","currentPlaceId","getShipsForSaleHere","filter","getShipsForSale","replaceShip","newShips","s","getCargoById","cargos","getCargoForSaleHere","getCargoInPort","getCargoOnBoard","cargoCount","max","showWelcomePage","showing","type","moveShip","connect","dispatch","quantity","cashPlusTradeIn","place_Chandler","place_FuelDepot","cashBoxStyle","Crew","crewArr","Fuel","fuelArr","position","foodStyle","Food","foodArr","holdStyle","Hold","localPrices","sellCargo","emptyCargoBays","shipStyle","nameplateStyle","stateUtils","actions","ship_Hold","ship_Food","ship_Fuel","ship_Crew","Cash","timeViewStyle","dayStyle","bellsStyle","TimeView","days","ticksToday","mapPanelStyle","mapStyle","gridTemplateColumns","gridTemplateRows","Square","p","myPlace","isDestination","isMoving","squareStyle","gridColumn","gridRow","backgroundPosition","arrowStyle","transform","_arrowRotation","left","top","zIndex","shipCssClass","className","_isDestination","abs","backToWelcomePageStyle","src_TimeView","MapPanel_Square","mobileMapPanelStyle","selectShipTab","backgroundSize","myShipIsHere","inPortHere","timeContainerStyle","right","whichTab","MobileMapPanel_Square","mainPageStyle","mainPageStyleForMobile","bottom","disabledButtonStyle","enabledButtonStyle","youarehereButtonStyle","helpButtonStyle","mobileNavStyle","MainPage","isInPort","screenWidth","selectPortTab","selectMapTab","selectedTab","PlacePanel","ShipPanel","ShiplessPanel","MapPanel","portButtonStyle","portButtonDisabled","shipButtonStyle","shipButtonDisabled","mapButtonStyle","mapButtonDisabled","MobileMapPanel","showingWelcomePage","gameOver","gameOverMessage","cashToWin","startNewGame","welcome_WelcomePage","src_MainPage","state0","window","innerWidth","timeStop","slowTimeCounter","moveEndTime","defaultPlaceId","cargoProducers","period","tickHandler","newState","doTickly","oldState","newCargos","toConsumableArray","forEach","producersProduce","currentPlace","crew","crewPerson","eatFood","doDaily","rootReducer","arguments","undefined","action","oldShip","newCash","c","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","getState","stringify","setItem","_unused","saveState","ReactDOM","render","es","App","document","getElementById","setInterval"],"mappings":"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","file":"static/js/main.5ce6b439.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst IntroText = () => (\r\n    <div>\r\n        <h1>A Steampunk Trading Game</h1>\r\n\r\n        <p>This is a classic trading game. You start with some money. Buy a ship. Buy some cargo. Sail to another port. Sell\r\n        the cargo at a profit. And repeat until rich</p>\r\n\r\n        <p>Along the way, you can upgrade to bigger and faster ships so you can make money even faster.</p>\r\n\r\n        <p>But you have to be quick. Your crew is eating up your supplies. When you are in port, that costs\r\n            money. And at sea, you can starve.\r\n        </p>\r\n\r\n        <p><i>Note: This game currently runs client-side only. There's no server. And if you leave the page, \r\n            you start over.</i></p>\r\n\r\n    </div>\r\n)\r\n\r\nexport default IntroText","import React from 'react'\r\n\r\nconst PlayingTheGame = () => (\r\n    <div>\r\n        <h2>Playing the Game</h2>\r\n\r\n        <p>You start with some money, measured in Florins. Ships are for sale in the upper left. \r\n            Click to buy one. Any ship you can afford will have a &quot;Buy&quot; button based\r\n            on your cash plus the value of your current ship.</p>\r\n\r\n        <p>Next, buy some cargo. You will learn the prices at each port as you play. But for now, there's no point in exploring\r\n            with an empty hold. Cargos for sale are shown at the bottom of the left hand panel. Any \r\n            cargo you can buy will have the local price displayed on its icon. Click to buy it and\r\n            it will automatically move to fill an empty space in your ship&apos; hold.\r\n        </p>\r\n\r\n        <p>Your ship is shown in the center column on a large screen, or use the PORT, SHIP, and MAP tabs on mobile.\r\n        </p>\r\n\r\n        <p>Be sure to buy rations for you and your crew. The game automatically buys rations for you when you are in port.\r\n            But if you set sail without food, you will starve before you reach the next port. Every crewmember uses one\r\n            unit of rations per day. You can click the single barrel symbol to buy one unit at a time. Or click\r\n            the group to fill your ship&apos;s capacity with a single click.\r\n        </p>\r\n\r\n        <p>When you get a ship that needs fuel, you will find that fuel works just like rations.</p>\r\n\r\n        <p>The right-most panel, or the MAP panel on mobile, shows the map of the world.\r\n            When you are ready to set sail, click an arrow to move to an adjacent square.\r\n            Your ship will bob over the waves for a time. How long depends on its speed. Then it\r\n            will arrive in the new square and you will see a new set of arrows showing the\r\n            squares you can move to.\r\n        </p>\r\n\r\n        <p>When you reach another port, your cargos in the SHIP panel will display the local price which you\r\n            can sell them for. Click a cargo to sell it</p>\r\n\r\n        <p>Buy bigger and faster ships when you can. A ship will display a buy button when you become\r\n            rich enough buy it.\r\n            Note that the value of your current ship counts as a trade-in.\r\n            </p>\r\n        \r\n        <p>And when you amass a fortune of fifty thousand florins, you win!</p>\r\n   \r\n    </div>\r\n)\r\n\r\nexport default PlayingTheGame","/*\r\n * The cargoFactory function creates object representing various kinds of cargos,\r\n * using the minium possible input information and infering other details from the \r\n * cargoType parameter.\r\n *\r\n * The shipyard function creates ship objects,\r\n * using the minium possible input information and infering other details from the \r\n * shipType parameter.\r\n */\r\n\r\n//Unique id generator\r\nlet ___nextId = Math.random() //Random so game running from saved state won't repeat IDs.\r\nexport function nextId() {\r\n    return ___nextId++\r\n}\r\n\r\nconst baseCargo = {isForSale: true, isLoaded: false, shipId: null}\r\n\r\nexport const labelForCargoType = {\r\n    oliveoil: 'Olive oil',\r\n    coal: 'Coal',\r\n    leopardwood:'Leopard Wood',\r\n    clockworks:'Clockworks',\r\n    kippers:'Kippers',\r\n    fluff:'Fluff'\r\n}\r\nexport function cargoFactory(cargoType, placeId) {\r\n    return {...baseCargo, \r\n            cargoLabel: labelForCargoType[cargoType], \r\n            cargoId: 'cargo_' + cargoType + '_' + nextId(),\r\n            placeId: placeId,\r\n            cargoType: cargoType\r\n    }\r\n}\r\n\r\nexport function shipyard(placeId, shipType, shipName) {\r\n    let newShip = {\r\n        shipId: 'ship_' + shipType + '_' + nextId(),\r\n        placeId: placeId, \r\n        shipType: shipType, \r\n        shipName: shipName,\r\n        food:0, \r\n        cargo: [], \r\n        fuel: 0,\r\n        isForSale: true,\r\n        isFlyer: false\r\n    }\r\n    switch (shipType) {\r\n        case 'fishboat':\r\n            newShip.shipTypeName = 'Fish Boat'\r\n            newShip.basePrice = 500\r\n            newShip.crewSize = 1\r\n            newShip.maxFuel = 0\r\n            newShip.speed = 1\r\n            newShip.fuelPerMove = 0\r\n            newShip.maxCargo = 4\r\n            newShip.maxFood = 8\r\n            break\r\n        case 'albionsteamclipper':\r\n            newShip.shipTypeName = 'Albion Steam Clipper'\r\n            newShip.basePrice = 12000\r\n            newShip.crewSize = 4\r\n            newShip.maxFuel = 7\r\n            newShip.speed = 3\r\n            newShip.fuelPerMove = 1\r\n            newShip.maxCargo = 12\r\n            newShip.maxFood = 20\r\n            break\r\n        case 'enginebarge':\r\n            newShip.shipTypeName = 'Engine Barge'\r\n            newShip.basePrice = 4000\r\n            newShip.crewSize = 2\r\n            newShip.maxFuel = 7\r\n            newShip.speed = 1\r\n            newShip.fuelPerMove = 1\r\n            newShip.maxCargo = 20\r\n            newShip.maxFood = 14\r\n            break\r\n        case 'silverzeppelin':\r\n            newShip.shipTypeName = 'Silver Zeplin'\r\n            newShip.basePrice = 20000\r\n            newShip.crewSize = 2\r\n            newShip.maxFuel = 10\r\n            newShip.speed = 2\r\n            newShip.fuelPerMove = 2\r\n            newShip.maxCargo = 6\r\n            newShip.maxFood = 16\r\n            newShip.isFlyer = true\r\n            break\r\n        case 'steamturbinehovercraft':\r\n            newShip.shipTypeName = 'Steam Turbine Hovercraft'\r\n            newShip.basePrice = 5000\r\n            newShip.crewSize = 2\r\n            newShip.maxFuel = 12\r\n            newShip.speed = 3\r\n            newShip.fuelPerMove = 3\r\n            newShip.maxCargo = 4\r\n            newShip.maxFood = 10\r\n            newShip.isFlyer = true\r\n            break\r\n        default:\r\n            alert('Unknown ship type \"'+shipType+'\"')\r\n    }\r\n    return newShip\r\n}\r\n","import React from 'react'\r\n\r\n/*\r\n * Constants for magic values used multiple places in the project.\r\n *\r\n * Note that there's a separate styleConstants.js for colors and anythinng\r\n * else used for CSS which I want to keep in a single place.\r\n */\r\n\r\n /*\r\n  * Pixel width where we switch to the mobile layout\r\n  */\r\n export const SCREEN_WIDTH_THRESHOLD = 700\r\n\r\n/*\r\n * HTML entity for the symbol, like an \"f\" with a tail, used to represent\r\n * the unit of money used in the game.\r\n *\r\n * It's in a span because that happens to work with how I use it, and this\r\n * works around the gotcha of JSX escaping all \"dynamic\" values.\r\n */\r\nexport const FLORIN_MARK = <span>&#402;</span>\r\n","import React from 'react'\r\nimport { shipyard } from '../factories'\r\nimport { FLORIN_MARK } from '../constants'\r\n\r\n/*\r\n * This component displays an image and data sheet for every kind\r\n * of ship in the game.\r\n */\r\n\r\nconst allShipTypes = [\r\n    'fishboat', \r\n    'albionsteamclipper', \r\n    'enginebarge', \r\n    'silverzeppelin',\r\n    'steamturbinehovercraft'\r\n]\r\n\r\nconst exampleShips = allShipTypes.map((shipType)=>(shipyard('bogoPlace', shipType, 'bogoName')))\r\n\r\nconst aboutShipsStyle = {\r\n    marginTop: '50px'\r\n}\r\nconst AboutShips = () => (\r\n    <div style={aboutShipsStyle}>\r\n        <h2>Ships</h2>\r\n        <p>Here are all the ships and other vehicles\r\n            available in the game. Consult this if you want to calculate exactly\r\n            how much fuel or food are required for a given trip, or to understand how\r\n            much money you have to accumulate to trade up to a better vehicle.\r\n        </p>\r\n        <p>However, as long as you keep your food and fuel supplies topped up, you can \r\n            also play by just watching the UI and seeing what happens.\r\n        </p>\r\n        {exampleShips.map((ship)=>(<ShipTypeData key={ship.shipType} ship={ship} />))}\r\n    </div>\r\n)\r\n\r\nconst shipTypeDataStyle = {\r\n    textAlign: 'center',\r\n    border: '1px solid gray',\r\n    borderRadius: '20px',\r\n    margin: '20px auto',\r\n    padding: '10px',\r\n    maxWidth: '400px'\r\n}\r\nconst tableStyle = {\r\n    margin: '20px auto',\r\n}\r\nconst ShipTypeData = ({ship}) => (\r\n    <div style={shipTypeDataStyle}>\r\n        <img src={'img/' + ship.shipType + '_large.png'} alt=\"\" style={{maxWidth: '90%'}} />\r\n        <div>\r\n            <h3>{ship.shipTypeName}</h3> \r\n             <table border=\"1\" style={tableStyle}>\r\n                 <tbody>\r\n                     <tr><td>Base Price</td><td>{ship.basePrice}{FLORIN_MARK}</td></tr>\r\n                     <tr><td>Crew Size</td><td>{ship.crewSize}</td></tr>\r\n                     <tr><td>Fuel Capacity</td><td>{ship.maxFuel}</td></tr>\r\n                     <tr><td>Max Speed</td><td>{ship.speed}</td></tr>\r\n                     <tr><td>Fuel per Square Moved</td><td>{ship.fuelPerMove}</td></tr>\r\n                     <tr><td>Cargo Bays</td><td>{ship.maxCargo}</td></tr>\r\n                     <tr><td>Food Store</td><td>{ship.maxFood}</td></tr>\r\n                 </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n\r\nexport default AboutShips","//Used in state0.js\r\n\r\n//Every place has a prices object. If place.prices[cargoType] isn't defined, there's no market for \r\n//  that cargoType at that place. If it is defined, the prices is both the buying and selling price\r\n\r\nexport const basePrices = {\r\n    oliveoil: 100,\r\n    coal: 50,\r\n    leopardwood: 200,\r\n    clockworks: 300,\r\n    kippers: 100,\r\n    fluff: 10\r\n}\r\n\r\nconst places = [\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_1', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1, isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 1,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_2', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 2,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_3', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 3,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_4', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 4,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_5', placeType: 'AT_SEA', description: 'At sea',  isFuelForSale: false, fuelPrice:-1, isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 5,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_6', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 6,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_7', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 7,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_1_8', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 1,\r\n        y: 8,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_2_1', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 2,\r\n        y: 1,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Point A', placeId: 'pointa', placeType: 'PORT', description: 'Not far frmo Point B', isFuelForSale: true, fuelPrice:10,  isFoodForSale: true, foodPrice: 5,\r\n        x: 2,\r\n        y: 2,\r\n        prices: {...basePrices, fluff:70, clockworks:100}\r\n    },\r\n    {\r\n        name: 'Third Place',\r\n        placeId: 'thirdplace',\r\n        placeType: 'PORT',\r\n        description: 'Not home or work',\r\n        isFuelForSale: true, fuelPrice:10, \r\n        isFoodForSale: true,\r\n        foodPrice: 15,\r\n        x: 2,\r\n        y: 3,\r\n        prices: {...basePrices, fluff:70, leopardwood:30}\r\n    },\r\n    {\r\n        name: 'Land', placeId: 'dry_2_4', placeType: 'LAND', description: 'Land', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 2,\r\n        y: 4,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Port Harbor',\r\n        placeId: 'portharbor',\r\n        placeType: 'PORT',\r\n        description: 'A nice little fishing village',\r\n        isFuelForSale: true, fuelPrice:10, \r\n        isFoodForSale: true,\r\n        foodPrice: 5,\r\n        x: 2,\r\n        y: 5,\r\n        prices: {...basePrices, kippers: 5, oliveoil:10}\r\n    },\r\n    {\r\n        name: 'Land', placeId: 'dry_2_6', placeType: 'LAND', description: 'Land', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 2,\r\n        y: 6,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Nether',\r\n        placeId: 'nether',\r\n        placeType: 'PORT',\r\n        description: 'A southern region',\r\n        isFuelForSale: true, fuelPrice:10, \r\n        isFoodForSale: true,\r\n        foodPrice: 10,\r\n        x: 2,\r\n        y: 7,\r\n        prices: {...basePrices, coal:10}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_2_8', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 2,\r\n        y: 8,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_3_1', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 3,\r\n        y: 1,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Point B', placeId: 'pointb', placeType: 'PORT', description: 'Not far frmo Point A', isFuelForSale: true, fuelPrice:10,  isFoodForSale: true, foodPrice: 5,\r\n        x: 3,\r\n        y: 2,\r\n        prices: {...basePrices, fluff:70}\r\n    },\r\n    {\r\n        name: 'Land', placeId: 'dry_3_3', placeType: 'LAND', description: 'Land', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 3,\r\n        y: 3,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Land', placeId: 'dry_3_4', placeType: 'LAND', description: 'Land', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 3,\r\n        y: 4,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Heck', placeId: 'heck', placeType: 'PORT', description: 'It\\'s all going to here.', isFuelForSale: true, fuelPrice:10,  isFoodForSale: true, foodPrice: 5,\r\n        x: 3,\r\n        y: 5,\r\n        prices: {...basePrices, coal:10}\r\n    },\r\n    {\r\n        name: 'Land', placeId: 'dry_3_6', placeType: 'LAND', description: 'Land', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 3,\r\n        y: 6,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Gibber', placeId: 'gibber', placeType: 'PORT', description: 'Home of a popular language.', isFuelForSale: true, fuelPrice:10,  isFoodForSale: true, foodPrice: 5,\r\n        x: 3,\r\n        y: 7,\r\n        prices: {...basePrices, fluff:2}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_3_8', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 3,\r\n        y: 8,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_1', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 1,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_2', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 2,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_3', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 3,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_4', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 4,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_5', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 5,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 6,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_7', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 7,\r\n        prices: {}\r\n    },\r\n    {\r\n        name: 'Ocean', placeId: 'wet_4_8', placeType: 'AT_SEA', description: 'At sea', isFuelForSale: false, fuelPrice:-1,  isFoodForSale: false, foodPrice: -1,\r\n        x: 4,\r\n        y: 8,\r\n        prices: {}\r\n    }\r\n]\r\n\r\nexport default places\r\n","/*\r\n * Used to decouple the names and locations of image files from \r\n * the string values identifying various types of things.\r\n *\r\n * Currently includes type-string to image file mappings for ship types \r\n * and cargos. \r\n * \r\n * Note the assumption that no type name will ever appear in \r\n * two categories. Probably something to recondsider. But \r\n * a) the natural names just don't seem to overlap, and\r\n * b) they are not visible to the user so it's easy to pick names\r\n * to ensure that they don't.\r\n */\r\n\r\nexport default {\r\n    oliveoil: 'img/oliveoil.png',\r\n    fishboat: 'img/fishboat.png',\r\n    albionsteamclipper: 'img/albionsteamclipper.png',\r\n    enginebarge: 'img/enginebarge.png',\r\n    silverzeppelin: 'img/silverzeppelin.png',\r\n    steamturbinehovercraft: 'img/steamturbinehovercraft.png',\r\n    coal: 'img/coal.png',\r\n    leopardwood: 'img/leopardwood.png',\r\n    clockworks: 'img/clockworks.png',\r\n    kippers: 'img/kippers.png',\r\n    fluff: 'img/fluff.png'\r\n}","import React from 'react'\r\nimport {labelForCargoType} from '../factories'\r\nimport {basePrices} from '../state0_places'\r\nimport imagesByType from '../imagesByType'\r\nimport {FLORIN_MARK} from '../constants'\r\n/*\r\n * This component displays an image and description for every kind\r\n * of cargo in the game.\r\n */\r\nconst cargoTypes = ['oliveoil', 'coal', 'leopardwood', 'clockworks', 'kippers', 'fluff']\r\nconst cargosContainerStyle = {\r\n    display: 'flex',\r\n    flexWrap: 'wrap'\r\n}\r\nconst cagoDisplayStyle = {\r\n    margin: '5px',\r\n    textAlign: 'center',\r\n    border: '1px solid gray',\r\n    borderRadius: '10px',\r\n    padding: '5px'\r\n}\r\nconst AboutCargos = () => (\r\n    <div>\r\n        <h2>Cargos</h2>\r\n        <p>Here are the kinds of cargo you will see in the game. Each cargo image\r\n            represents the amount of cargo which will fit in one cargo bay.\r\n            The buying or selling price is displayed whenever a cargo can be bought or sold.\r\n            So you can click on any cargo image that is displaying a price.\r\n        </p>\r\n        <div style={cargosContainerStyle}>\r\n            {cargoTypes.map((cargoType)=>(<CargoDisplay key={cargoType} cargoType={cargoType} />))}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst CargoDisplay = ({cargoType}) => (\r\n    <div style={cagoDisplayStyle}>\r\n        <h3>{labelForCargoType[cargoType]}</h3>\r\n        <img src={imagesByType[cargoType]} alt={labelForCargoType[cargoType]} /><br />\r\n        Avg price: {basePrices[cargoType]}{FLORIN_MARK}\r\n    </div>\r\n)\r\n\r\nexport default AboutCargos","import React from 'react'\r\nimport IntroText from './IntroText'\r\nimport PlayingTheGame from './PlayingTheGame'\r\nimport AboutShips from './AboutShips'\r\nimport AboutCargos from './AboutCargos'\r\nimport {seaBlue} from '../styleConstants'\r\n\r\n/* This game has two screens: This componet displays the \"welcome\" screen, which information\r\n * the player can read before playing.\r\n * When they're ready, a button takes them to the MainPage componet for actual play.\r\n */\r\n\r\nconst wrapperStyle = {\r\n    background: seaBlue,\r\n    padding: '40px'\r\n}\r\nconst welcomePageStyle = {\r\n    maxWidth: '800px',\r\n    margin: '0px auto',\r\n    padding: '20px',\r\n    background: 'white',\r\n    borderRadius: '40px'\r\n}\r\nconst welcomeImageStyle = {\r\n    display: 'block',\r\n    margin: '0 auto',\r\n    maxWidth: '90%'\r\n}\r\nconst buttonStyle = {\r\n    color: 'white',\r\n    background: 'blue',\r\n    fontSize: '20px',\r\n    fontWeight: 'bold',\r\n    borderRadius: '10px'\r\n}\r\nconst WelcomePage = ({hideWelcomePage, ticks, resetState}) => {\r\n    const buttonText = (ticks > 0) ? 'Return to game' : 'Start the game'\r\n    return (\r\n        <div style={wrapperStyle}>\r\n            <div style={welcomePageStyle}>\r\n                <div style={{textAligh:'right'}}>\r\n                    <button style={buttonStyle} onClick={hideWelcomePage} >{buttonText} >>>></button>\r\n                </div>\r\n                <br />\r\n                <img src=\"img/albionsteamclipper_large.png\" alt=\"A ship with steam and sail\" style={welcomeImageStyle} />\r\n                <div style={{textAlign:'right'}}>\r\n                    <br />\r\n                    {ticks > 0 ? <button onClick={resetState}>Clear and restart</button> : ''}\r\n                </div>\r\n                <IntroText />\r\n                <PlayingTheGame />\r\n                <AboutShips />\r\n                <AboutCargos />\r\n                <br />\r\n                <button style={buttonStyle} onClick={hideWelcomePage} >{buttonText} >>>></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WelcomePage","/*\r\n* Colors and anythig used for CSS which I want to keep in a single place.\r\n*\r\n* Note that there's a general constants.js for other kinds of magic values.\r\n*/\r\n\r\nconst seaBlue = '#88f'\r\n\r\nexport {seaBlue}\r\n","import React from 'react'\r\nimport imagesByType from '../imagesByType'\r\nimport {seaBlue} from '../styleConstants'\r\nimport {FLORIN_MARK} from '../constants'\r\n\r\n/*\r\n * This component displays all the ships which are for sale at the current seaport.\r\n * Ships which the player can afford have an active \"buy\" button.\r\n */\r\n \r\nconst sfsStyle = {\r\n    background:seaBlue, \r\n    color: 'white', \r\n    minHeight: '150px', \r\n    paddingLeft: '10px',\r\n    marginLeft: '10px',\r\n    borderTopLeftRadius: '10px',\r\n    borderBottomLeftRadius: '10px'\r\n}\r\nexport default function ShipsForSaleComponent({shipsForSale, cash, buyShip, myShipId}) {\r\n    const highlightBuyButton = !myShipId\r\n    return (\r\n        <div style={sfsStyle} >\r\n            <h3>Ships for Sale</h3>\r\n            {shipsForSale.map((ship)=><ShipForSale key={ship.shipId} highlightBuyButton={highlightBuyButton}buyShip={buyShip} ship={ship} canBuy={ship.basePrice <= cash}/>)}\r\n        </div>\r\n    )\r\n}\r\nconst highlightedButtonStyle = {\r\n    color: 'red',\r\n    background: 'yellow'\r\n}\r\nconst normalButtonStyle = {}\r\nfunction  ShipForSale({ship, canBuy, buyShip, highlightBuyButton}) {\r\n    const buttonStyle = highlightBuyButton ? highlightedButtonStyle : normalButtonStyle\r\n    return (\r\n        <div >\r\n            <img alt=\"\" src={imagesByType[ship.shipType]} />\r\n            {ship.shipTypeName} &nbsp;\r\n            <em>{ship.shipName}</em> &nbsp;\r\n            {ship.basePrice}{FLORIN_MARK} &nbsp;\r\n            {canBuy ? <button style={buttonStyle} onClick={()=>{buyShip(ship.shipId)}}>buy</button> : ' '}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport imagesByType from '../imagesByType'\r\nimport {FLORIN_MARK} from '../constants'\r\n\r\n\r\n/**\r\n * This component displays one unit of cargo, on the dock or in the hold.\r\n * If a price isn't null, the component can be clicked to trigger a buy or sell.\r\n * If the \"empty\" param is true, this component displays an empty cargo bay.\r\n * \r\n * empty - If true, don't show any cargo. But keep the same size and positioning.\r\n * \r\n * aCargo - will to be an object like: {isForSale: true, cargoId:'cargo1', cargoLabel: 'Olive Oil', cargoType: 'oliveoil',\r\n *                                   isLoaded: false, placeId: 'portharbor', shipId: null}\r\n * \r\n * price - the buying or selling price.\r\n * \r\n * enabled - controls whether the component is clickable\r\n * \r\n * cargoClicked - a function which expects a cargoId. A cargo-buying or cargo-selling function should be passed depending\r\n *               on where this component is used.\r\n */\r\n\r\nconst buttonStyle = (cargo) => {\r\n    return {\r\n        height:'50px',\r\n        width: '50px',\r\n        background: (cargo) ? 'url(' + imagesByType[cargo.cargoType] + ') no-repeat' : 'inherit',\r\n        paddingTop: '30px',\r\n        fontWeight: 'bold',\r\n        color: 'gold',\r\n        textShadow: '1px 1px 2px black'\r\n    }\r\n}\r\nconst Cargo = ({empty, aCargo, price, enabled, cargoClicked}) => {\r\n    if (empty) {\r\n        return (\r\n            <button title={\"empty\"} disabled style={buttonStyle(aCargo)}>\r\n                &nbsp;\r\n            </button>\r\n        )\r\n    }\r\n    if (enabled) {\r\n        return (\r\n            <button title={aCargo.cargoLabel} onClick={()=>{cargoClicked(aCargo.cargoId)}} style={buttonStyle(aCargo)}>\r\n                {price}{FLORIN_MARK}\r\n            </button>\r\n        )\r\n    } else {\r\n        return (\r\n            <button title={aCargo.cargoLabel} disabled style={buttonStyle(aCargo)}>\r\n                &nbsp;\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cargo","import React from 'react'\r\nimport Cargo from '../shared_components/Cargo'\r\n\r\n/*\r\n * This is a component displaying the cargos which are currently for sale at the current\r\n * seaport.\r\n */\r\n\r\nexport default function CargosForSaleComponent({prices, hasShip, numberOfEmptyCargoBays, cargosForSale, cash, buyCargo}) {\r\n    return (\r\n        <div >\r\n            <h3>Cargos for Sale</h3>\r\n            {cargosForSale.map((cargo)=>{\r\n                let price = prices[cargo.cargoType]\r\n                return (\r\n                    <Cargo\r\n                        key={cargo.cargoId} \r\n                        cargoClicked={buyCargo} \r\n                        aCargo={cargo} \r\n                        price={price}\r\n                        enabled={hasShip && (price <= cash) && numberOfEmptyCargoBays}\r\n                    />\r\n                )\r\n                \r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {FLORIN_MARK} from '../constants'\r\n/*\r\n * This componet is where the player buys rations for the crew.\r\n * For convenience, it displays a button for buying a single day's rations,\r\n * and another large button which will buy exactly enough rations to fill\r\n * the player's ship's capacity to hold them.\r\n */\r\n\r\nconst Chandler = ({place, buyFood, hasShip, myShip}) => {\r\n    let foodGap = 0\r\n    let visualFoodGap = []\r\n    if (hasShip) {\r\n        foodGap = myShip.maxFood - myShip.food\r\n    }\r\n    for (let i = 0; i < foodGap; i++) {\r\n        visualFoodGap.push(<img key={i} alt=\"rations\" src=\"img/rations.png\"/>)\r\n    }\r\n    const buttonStyle = {\r\n        background: 'inherit'\r\n    }\r\n    if (place.isFoodForSale) {\r\n        return (\r\n            <div>\r\n                <h3>Buy rations</h3> \r\n                {(hasShip) ? \r\n                    <div>\r\n                        <button style={buttonStyle} onClick={()=>{buyFood(place.placeId, 1)}}>\r\n                            <img alt=\"rations\" src=\"img/rations.png\"/>\r\n                            {place.foodPrice} {FLORIN_MARK}\r\n                        </button> \r\n                    </div>\r\n                :\r\n                    ''\r\n                }\r\n                {(foodGap) ? \r\n                    <div>\r\n                        <button style={buttonStyle} onClick={()=>{buyFood(place.placeId, foodGap)}}>\r\n                            {visualFoodGap}\r\n                            {place.foodPrice * foodGap}  {FLORIN_MARK}\r\n                        </button>\r\n                        </div> \r\n                : \r\n                    ''\r\n                }\r\n\r\n            </div>\r\n        ) \r\n    } else {\r\n        return <div> </div>\r\n    }\r\n}\r\n\r\nexport default Chandler\r\n","import React from 'react'\r\nimport {FLORIN_MARK} from '../constants'\r\n/*\r\n * This component is where the player buys fuel.\r\n * It has a botton to buy one unit of fuel, and another to \r\n * buy the exact amount required to max out the ship's storage\r\n * capacity.\r\n */\r\n \r\nconst FuelDepot = ({place, buyFuel, hasShip, myShip}) => {\r\n    let fuelGap = 0\r\n    let visualFuelGap = []\r\n    if (hasShip) {\r\n        fuelGap = myShip.maxFuel - myShip.fuel\r\n    }\r\n    for (let i = 0; i < fuelGap; i++) {\r\n        visualFuelGap.push(<img key={i} alt=\"fuel\" src=\"img/fuel.png\"/>)\r\n    }\r\n    const buttonStyle = {\r\n        background: 'inherit'\r\n    }\r\n    if (place.isFuelForSale) {\r\n        return (\r\n            <div>\r\n                <h3>Buy fuel</h3> \r\n                {(hasShip) ? \r\n                    <div>\r\n                        <button style={buttonStyle} onClick={()=>{buyFuel(place.placeId, 1)}}>\r\n                            <img alt=\"rations\" src=\"img/fuel.png\"/>\r\n                            {place.fuelPrice}  {FLORIN_MARK}\r\n                        </button> \r\n                    </div>\r\n                :\r\n                    ''\r\n                }\r\n                {(fuelGap) ? \r\n                    <div>\r\n                        <button style={buttonStyle} onClick={()=>{buyFuel(place.placeId, fuelGap)}}>\r\n                            {visualFuelGap}\r\n                            {place.fuelPrice * fuelGap}  {FLORIN_MARK}\r\n                        </button>\r\n                        </div> \r\n                : \r\n                    ''\r\n                }\r\n\r\n            </div>\r\n        ) \r\n    } else {\r\n        return <div> </div>\r\n    }\r\n}\r\n\r\nexport default FuelDepot\r\n","//By convention, \"get...\" functions all return new obejcts, not references to existing state.\r\n//           And \"replace...\" functions expect new objects, not references to existing state.\r\n\r\n\r\nexport function getShipById(shipId, state) {\r\n    for (let i = 0; i < state.ships.length; i++) {\r\n        if (state.ships[i].shipId === shipId) {\r\n            return {...state.ships[i]}\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport function getMyShip(state) {\r\n    return state.myShipId && getShipById(state.myShipId, state)\r\n}\r\n\r\nexport function getPlaceById(id, state) {\r\n    for (let i = 0; i < state.places.length; i++) {\r\n        if (state.places[i].placeId === id) {\r\n            return {...state.places[i]}\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport function replacePlace(newPlace, state) {\r\n    let newPlaces = state.places.map((p)=>( (p.placeId === newPlace.placeId) ? newPlace : p) )\r\n    return { ...state, places: newPlaces}\r\n}\r\n\r\nexport function getCurrentPlace(state) {\r\n    return getPlaceById(state.currentPlaceId, state)\r\n}\r\n\r\nexport function getShipsForSale(placeId, state) {\r\n    return state.ships.filter((ship)=>(ship.placeId === placeId && ship.isForSale))\r\n}\r\n\r\nexport function getShipsForSaleHere(state) {\r\n    return getShipsForSale(state.currentPlaceId, state)\r\n}\r\n\r\nexport function replaceShip(ship, state) {\r\n    let newShips = state.ships.map((s)=>( (s.shipId === ship.shipId) ? ship : s) )\r\n    return { ...state, ships: newShips}\r\n}\r\n\r\nexport function getCargoById(id, state) {\r\n    for (let i = 0; i < state.cargos.length; i++) {\r\n        if (state.cargos[i].cargoId === id) {\r\n            return {...state.cargos[i]}\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport function getCargoInPort(placeId, state) {\r\n    return state.cargos.filter((cargo)=>(!cargo.isLoaded && cargo.placeId === placeId))\r\n}\r\n\r\nexport function getCargoForSaleHere(state) {\r\n    return getCargoInPort(state.currentPlaceId, state)\r\n}\r\n\r\nexport function getCargoOnBoard(shipId, state) {\r\n    return state.cargos.filter((cargo)=>(cargo.isLoaded && cargo.shipId === shipId))\r\n}\r\n\r\nexport function numberOfEmptyCargoBays(state) {\r\n    const myShip = getMyShip(state)\r\n    if (!myShip) {\r\n        return 0\r\n    }\r\n    const cargoCount = getCargoOnBoard(myShip.shipId, state).length\r\n    return Math.max(0, myShip.maxCargo - cargoCount)\r\n}\r\n\r\nexport function replaceCargo(cargo, state) {\r\n    let newCargos = state.cargos.map((c)=>( (c.cargoId === cargo.cargoId) ? cargo : c) )\r\n    return { ...state, cargos: newCargos}\r\n}\r\n\r\nexport function removeCargo(cargo, state) {\r\n    let newCargos = state.cargos.filter((c)=>(c.cargoId !== cargo.cargoId))\r\n    return { ...state, cargos: newCargos}\r\n}\r\n\r\n","/*\r\n * Redux action creators.\r\n *\r\n * It's a convention of this project aht all Redux action object must be created by\r\n * an action creator function. And all action creator functions must be in this file.\r\n * \r\n * I decided not to use a file of string constants for action names because those\r\n * strings are all only used in exactly two places, here and in rootReducer.js.\r\n * (And any typo is fail-fast.)\r\n */\r\n\r\nexport function tick() {\r\n\treturn {type: 'TICK'}\r\n}\r\n\r\nexport function showWelcomePage(showing) {\r\n\treturn {type: 'SHOW_WELCOME_PAGE', showing: showing}\r\n}\r\n\r\nexport function startNewGame() {\r\n\treturn {type: 'START_NEW_GAME'}\r\n}\r\n\r\nexport function selectPortTab() {\r\n\treturn {type: 'SELECT_TAB', whichTab:'PORT'}\r\n}\r\nexport function selectShipTab() {\r\n\treturn {type: 'SELECT_TAB', whichTab:'SHIP'}\r\n}\r\nexport function selectMapTab() {\r\n\treturn {type: 'SELECT_TAB', whichTab:'MAP'}\r\n}\r\n\r\nexport function buyShip(shipId) {\r\n\treturn {type: 'BUY_SHIP', shipId: shipId}\r\n}\r\n\r\nexport function buyCargo(cargoId) {\r\n\treturn {type: 'BUY_CARGO', cargoId: cargoId}\r\n}\r\n\r\nexport function buyFood(placeId, quantity) {\r\n\treturn {type: 'BUY_FOOD', placeId: placeId, quantity: quantity}\r\n}\r\n\r\nexport function buyFuel(placeId, quantity) {\r\n\treturn {type: 'BUY_FUEL', placeId: placeId, quantity: quantity}\r\n}\r\n\r\n//Also moves the player, if it's their ship.\r\nexport function moveShip(shipId, placeId) {\r\n\treturn {type: 'MOVE_SHIP', shipId:shipId, placeId: placeId}\r\n}\r\n\r\nexport function sellCargo(cargoId) {\r\n\treturn {type: 'SELL_CARGO', cargoId: cargoId}\r\n}\r\n\r\nexport function resetState() {\r\n\treturn {type: 'RESET_STATE'}\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport ShipsForSale from './ShipsForSale'\r\nimport CargosForSale from './CargosForSale'\r\nimport Chandler from './Chandler'\r\nimport FuelDepot from './FuelDepot'\r\nimport { getCurrentPlace, getShipsForSaleHere, getCargoForSaleHere, getMyShip, numberOfEmptyCargoBays } from '../stateUtils'\r\nimport { buyShip, buyFood, buyFuel, buyCargo } from '../actions'\r\n\r\n/*\r\n * The PlacePanel is the top level component in this directory.\r\n * It represents a seaport, and has sub-components showing things for sale,\r\n * liek ships, cargos, rations, and fuel.\r\n */\r\n\r\nconst PlacePanelComponent = (\r\n  {place, \r\n    cash, \r\n    shipsForSale, \r\n    cargosForSale, \r\n    hasShip, \r\n    myShip,\r\n    numberOfEmptyCargoBays, \r\n    buyShip, \r\n    buyFood,\r\n    buyFuel, \r\n    buyCargo}\r\n) => {\r\n    let cashPlusTradeIn = cash + (myShip?myShip.basePrice:0)\r\n    return (<div style={{ background: '#ad0' }}>\r\n      <div >\r\n        <h2>{place.name}</h2>\r\n        <h3>{place.description}</h3>\r\n      </div>\r\n      <ShipsForSale shipsForSale={shipsForSale} cash={cashPlusTradeIn} buyShip={buyShip} />\r\n      <Chandler hasShip={hasShip} place={place} myShip={myShip} buyFood={buyFood} />\r\n      <CargosForSale prices={place.prices} hasShip={hasShip} numberOfEmptyCargoBays={numberOfEmptyCargoBays} cargosForSale={cargosForSale} cash={cash} buyCargo={buyCargo} />\r\n      <FuelDepot hasShip={hasShip} place={place} myShip={myShip} buyFuel={buyFuel} />\r\n    </div>);\r\n  }\r\n\r\nconst mapStateToProps = state => ({\r\n  place: getCurrentPlace(state),\r\n  shipsForSale: getShipsForSaleHere(state),\r\n  cargosForSale: getCargoForSaleHere(state),\r\n  cash: state.cash,\r\n  hasShip: !!state.myShipId,\r\n  myShip: getMyShip(state),\r\n  numberOfEmptyCargoBays: numberOfEmptyCargoBays(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  buyShip: (shipId) => { dispatch(buyShip(shipId)) },\r\n  buyFood: (placeId, quantity) => { dispatch(buyFood(placeId, quantity)) },\r\n  buyFuel: (placeId, quantity) => { dispatch(buyFuel(placeId, quantity)) },\r\n  buyCargo: (cargoId) => {dispatch(buyCargo(cargoId)) }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PlacePanelComponent)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n/*\r\n * This component is the player's cash box. It displays how much money the player has\r\n */\r\n\r\nconst cashBoxStyle = {\r\n  background: 'gold',\r\n  border: '5px solid brown',\r\n  width: '150px',\r\n  textAlign: 'center',\r\n  margin: '10px auto 10px auto'\r\n}\r\nconst CashComponent = ({cash}) => (\r\n    <div style={cashBoxStyle}>\r\n        Cash: {cash} florins\r\n    </div>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n  cash: state.cash\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(CashComponent)","import React from 'react'\r\n\r\n/*\r\n * A component displaying a number of crewperson images equal to the ship's crewSize.\r\n */\r\n\r\nconst Crew = ({myShip}) => {\r\n    let crewArr = []\r\n    for (let i = 0; i < myShip.crewSize; i++) {\r\n        crewArr.push(<img key={i} src=\"img/crew.png\" alt=\"crewperson\" />)\r\n    }\r\n    return (\r\n        <div style={{marginTop: '5px'}} >\r\n            {crewArr}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crew","import React from 'react'\r\n\r\n/*\r\n * This component displays a ship's fuel stores using an image\r\n * for a unit of fuel and a different image for an available space \r\n * which is currently empty.\r\n */\r\nconst Fuel = ({myShip}) =>  {\r\n    if (!myShip.fuelPerMove) {\r\n        return <div> </div>\r\n    }\r\n    let fuelArr = []\r\n    for (let i = 0; i < myShip.fuel; i++) {\r\n        fuelArr.push(<img src=\"img/fuel.png\" alt=\"Fuel barrel\" key={i} />)\r\n    }\r\n    for (let i = 0; i < (myShip.maxFuel - myShip.fuel); i++) {\r\n        fuelArr.push(<img src=\"img/no_fuel.png\" alt=\"Empty fuel bay\" key={'e'+i} />)\r\n    }\r\n    const fuelStyle = {\r\n        border: '3px solid brown',\r\n        borderRadius: '5px',\r\n        padding: '3px',\r\n        position: 'relative',\r\n        minHeight: '50px',\r\n        marginTop: '5px'\r\n    }\r\n    return (\r\n        <div style={fuelStyle}>\r\n            {fuelArr}\r\n        </div>\r\n    )\r\n}\r\nexport default Fuel\r\n","import React from 'react'\r\n\r\n/*\r\n * This is a component which displays a ship's food stores using an image\r\n * for a day's rations and a different image for an available space for a\r\n * day's rations which is currently empty.\r\n */\r\n\r\nconst foodStyle = {\r\n    marginTop: '5px',\r\n    border: '3px solid brown',\r\n    borderRadius: '5px',\r\n    padding: '3px',\r\n    position: 'relative',\r\n    minHeight: '35px'\r\n}\r\nconst Food = ({myShip}) => {\r\n    let foodArr = []\r\n    for (let i = 0; i < myShip.food; i++) {\r\n        foodArr.push(<img src=\"img/rations.png\" alt=\"rations\" key={i} />)\r\n    }\r\n    for (let i = 0; i < (myShip.maxFood - myShip.food); i++) {\r\n        foodArr.push(<img src=\"img/no_rations.png\" alt=\"Empty rations bay\" key={'e'+i} />)\r\n    }\r\n    return (\r\n        <div style={foodStyle}>\r\n            {foodArr}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Food\r\n","import React from 'react'\r\nimport Cargo from '../shared_components/Cargo'\r\n\r\n/*\r\n * This is the component within the Ship component which displays all the\r\n * cargo on board. The Cargo component has an \"empty\" property and an empty\r\n * Cargo represents an empty cargo bay. So we always display \r\n * myShip.maxCargo Cargo components.\r\n */\r\n\r\nconst holdStyle = {\r\n    border: '3px solid brown',\r\n    borderRadius: '5px',\r\n    padding: '3px',\r\n    position: 'relative',\r\n    minHeight: '50px'\r\n}\r\nconst Hold = ({myShip, cargo, localPrices, sellCargo}) => {\r\n    const emptyCargoBays = []\r\n    for (let i = 0; i < (myShip.maxCargo - cargo.length); i++) {\r\n        emptyCargoBays.push(<Cargo key={i} empty={true} />)\r\n    }\r\n    return (\r\n        <div style={holdStyle}>\r\n                {cargo.map((aCargo)=>(\r\n                    <Cargo empty={false} key={aCargo.cargoId} cargoClicked={sellCargo} aCargo={aCargo} \r\n                           enabled={!!localPrices[aCargo.cargoType]} price={localPrices[aCargo.cargoType]} \r\n                    />\r\n                ))}\r\n                {emptyCargoBays}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hold","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Cash from './Cash'\r\nimport Crew from './Crew'\r\nimport Fuel from './Fuel'\r\nimport Food from './Food'\r\nimport Hold from './Hold'\r\nimport * as stateUtils from '../stateUtils'\r\nimport * as actions from '../actions'\r\nimport {seaBlue} from '../styleConstants'\r\n\r\n/*\r\n * This, and ShiplessPannel, are the two components in this directory which are used\r\n * directly by code outside this directory.\r\n *\r\n * This component represents the player's ship, and has sub-components for the cargo\r\n * hold, the food store, etc.\r\n */\r\n\r\nconst shipStyle = {\r\n  background: 'tan',\r\n  margin: '20px',\r\n  borderRadius: '40px',\r\n  border: '5px solid brown',\r\n  padding: '20px 20px 5px 20px'\r\n}\r\n\r\nconst nameplateStyle = {\r\n  //background: 'white',\r\n  fontSize: '20px',\r\n  fontWeight: 'bold',\r\n  //border: '1px solid black',\r\n  width: '200px',\r\n  textAlign: 'center',\r\n  margin: '10px auto 10px auto'\r\n}\r\n\r\nconst ShipPanelComponent = ({cash, myShip, cargo, localPrices, sellCargo}) => (\r\n  <div style={{background:seaBlue}}>\r\n    <div style={shipStyle}>\r\n      <Hold myShip ={myShip} cargo={cargo} localPrices={localPrices} sellCargo={sellCargo} />\r\n      <Food myShip={myShip} />\r\n      <Fuel myShip={myShip} />\r\n      <Crew myShip={myShip} />\r\n      <Cash />\r\n      <div style={nameplateStyle}>\r\n        {\"{{{\"} <em>{myShip.shipName}</em> {\"}}}\"}\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n  cash: state.cash,\r\n  myShip: stateUtils.getMyShip(state),\r\n  cargo: stateUtils.getCargoOnBoard(state.myShipId, state),\r\n  localPrices: stateUtils.getCurrentPlace(state).prices\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  sellCargo: (cargoId) => { dispatch(actions.sellCargo(cargoId)) }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ShipPanelComponent)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Cash from './Cash'\r\nimport {seaBlue} from '../styleConstants'\r\n\r\n/*\r\n * This component is displayed when the player doesn't own a ship.\r\n * However, it still displays the player's \"cash box\", showing how\r\n * much money they have to spend on ship.\r\n */\r\nconst ShiplessPanelComponent = ({cash, myShip}) => (\r\n    <div style={{background: seaBlue}}>\r\n        Time to buy a ship.\r\n        <Cash />\r\n    </div>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n  cash: state.cash,\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(ShiplessPanelComponent)","import React from 'react'\r\n\r\nconst timeViewStyle = {\r\n    fontWeight: 'bold',\r\n    border: '2px solid white',\r\n    borderRadius: '4px',\r\n    color: 'white',\r\n    paddingLeft: '5px',\r\n    fontSize: '16px',\r\n    width: '120px'\r\n}\r\nconst dayStyle = {\r\n    display: 'inline-block',\r\n    width: '60px',\r\n    textAlign: 'left'\r\n}\r\nconst bellsStyle = {\r\n    display: 'inline-block',\r\n    width: '50px',\r\n    textAlign: 'right'\r\n}\r\nconst TimeView = ({days, ticksToday}) => (\r\n    <div style={timeViewStyle}>\r\n        <div style={dayStyle}>Day {days}</div>\r\n        <div style={bellsStyle}>{ticksToday}:00</div>\r\n    </div>\r\n)\r\n\r\nexport default TimeView\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TimeView from './TimeView'\r\nimport * as stateUtils from './stateUtils'\r\nimport * as actions from './actions'\r\nimport {seaBlue} from './styleConstants'\r\nimport imagesByType from './imagesByType'\r\n\r\n/*\r\n * This component draws the entire map, creating a square for each element in state.places.\r\n */\r\n\r\nlet mapPanelStyle = {\r\n    border: '1px solid blue',\r\n    padding: '10px',\r\n    background: seaBlue\r\n}\r\n\r\nconst mapStyle = {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(4, 100px)',\r\n    gridTemplateRows: 'repeat(8, 100px)',\r\n    fontWeight: 'bold'\r\n}\r\n\r\nconst Square = ({p, myShip, myPlace, isDestination, isMoving, moveShip}) => {\r\n    const moveHandler = () => {\r\n        if (isDestination) {\r\n            moveShip(myShip.shipId, p.placeId)\r\n        }\r\n    }\r\n    let background = 'inherit'\r\n    if (p.placeType === 'LAND') {\r\n        background = '#db8'\r\n    }\r\n    if (p.placeType === 'PORT') {\r\n        background = '#ad0 no-repeat url(\"img/port.png\")'\r\n    }\r\n    let border = '1px solid blue'\r\n    if (isDestination && !isMoving) {\r\n        border = '1px solid yellow'\r\n    }\r\n    let squareStyle = {\r\n        border:border, \r\n        background: background,\r\n        gridColumn: p.x, \r\n        gridRow: p.y, \r\n        margin:'0px',\r\n        position: 'relative',\r\n        backgroundPosition: 'center'\r\n    }\r\n    let arrowStyle = {\r\n        transform: 'rotate('+_arrowRotation(p, myPlace)+'deg)',\r\n        left: '25px',\r\n        top: '25px',\r\n        zIndex: 10,\r\n        position: 'absolute'\r\n    }\r\n    let shipStyle={\r\n        left: '18px',\r\n        top: '18px',\r\n        zIndex: 5,\r\n        position: 'absolute',\r\n        border: 'none'\r\n    }\r\n    let shipCssClass = isMoving ? 'bobbing' : 'notbobbing'\r\n    return (\r\n        <div style={squareStyle} \r\n             key={p.placeId}\r\n             onClick={moveHandler}\r\n        >\r\n            {p.placeType === 'PORT' ? p.name : ''}\r\n            {(myShip && (myShip.placeId === p.placeId)) ? <img className={shipCssClass} style={shipStyle} alt={myShip.shipName} src={imagesByType[myShip.shipType]} /> : <span> </span>} \r\n            {(isDestination && !isMoving) ? <img style={arrowStyle} src=\"img/arrow_up.png\" alt=\"You can move to here\" /> : <span> </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction _isDestination(place, myPlace, myShip) {\r\n    //True if they are one square apart (not diagonal), and place is a port or sea square,\r\n    // and you are not going overland from port to port\r\n    return (\r\n        (place.placeType === 'PORT' || place.placeType === 'AT_SEA' || myShip.isFlyer) && \r\n        (!(myPlace.placeType === 'PORT' && place.placeType === 'PORT') || myShip.isFlyer) &&\r\n        ((Math.abs(place.x - myPlace.x) + Math.abs(place.y - myPlace.y)) === 1)\r\n    )\r\n}\r\n\r\n//For a given place and the player's ships place, compute the degrees rotation\r\n// from verticle for an arrow pointing away from the ship.\r\nfunction _arrowRotation(place, myPlace) {\r\n    if (myPlace.y > place.y) {\r\n        return 0\r\n    }\r\n    if (myPlace.x > place.x) {\r\n        return 270\r\n    }\r\n    if (myPlace.x < place.x) {\r\n        return 90\r\n    }\r\n    //my y < y, arrow stays pointing up\r\n    return 180\r\n}\r\n\r\nconst backToWelcomePageStyle = {\r\n    color: 'white',\r\n    background: 'blue',\r\n    fontSize: '16px',\r\n    borderRadius: '10px'\r\n}\r\nconst MapPanelComponent = ({\r\n        ticks, days, ticksToday, places, myShip, myPlace, isMoving, moveShip, showWelcomePage\r\n    }) => {\r\n    return (\r\n        <div style={mapPanelStyle}>\r\n            <div style={{display:'inline-block', width:'200px'}}>\r\n                <TimeView \r\n                    days={days}\r\n                    ticksToday={ticksToday}\r\n                />\r\n            </div>\r\n            <button onClick={showWelcomePage} style={backToWelcomePageStyle}>&lt;&lt; Back to home page</button>\r\n            <div style={mapStyle}>\r\n                {places.map((p)=>(<Square key={p.placeId} \r\n                                          p={p} \r\n                                          myShip={myShip} \r\n                                          myPlace={myPlace}\r\n                                          isMoving={isMoving}\r\n                                          isDestination={myShip && _isDestination(p, myPlace, myShip)}\r\n                                          moveShip={moveShip} \r\n                                  />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  days: state.days,\r\n  ticks: state.ticks,\r\n  ticksToday: state.ticksToday,\r\n  places: state.places,\r\n  myShip: stateUtils.getMyShip(state),\r\n  myPlace: stateUtils.getCurrentPlace(state),\r\n  isMoving: state.isMoving\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    moveShip: (shipId, placeId) => { dispatch(actions.moveShip(shipId, placeId)) }\r\n  })\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MapPanelComponent)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as stateUtils from './stateUtils'\r\nimport * as actions from './actions'\r\nimport {seaBlue} from './styleConstants'\r\nimport imagesByType from './imagesByType'\r\nimport TimeView from './TimeView'\r\n\r\n/*\r\n * Mobile version of the component which draws the entire map, creating a square \r\n * for each element in state.places.\r\n */\r\n\r\nlet mobileMapPanelStyle = {\r\n    border: '1px solid blue',\r\n    background: seaBlue\r\n}\r\n\r\nconst mapStyle = {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(4, 25%)',\r\n    gridTemplateRows: 'repeat(8, 25vw)',\r\n    fontWeight: 'bold',\r\n    width: '100%'\r\n}\r\n\r\nconst Square = ({p, myShip, myPlace, isDestination, isMoving, moveShip, selectShipTab}) => {\r\n    const moveHandler = () => {\r\n        if (isDestination) {\r\n            moveShip(myShip.shipId, p.placeId)\r\n        }\r\n    }\r\n    let background = 'inherit'\r\n    if (p.placeType === 'LAND') {\r\n        background = '#db8'\r\n    }\r\n    if (p.placeType === 'PORT') {\r\n        background = '#ad0 no-repeat url(\"img/port.png\")'\r\n    }\r\n    let border = '1px solid blue'\r\n    if (isDestination && !isMoving) {\r\n        border = '1px solid yellow'\r\n    }\r\n    let squareStyle = {\r\n        border:border, \r\n        background: background,\r\n        backgroundSize: 'contain',\r\n        gridColumn: p.x, \r\n        gridRow: p.y, \r\n        margin:'0px',\r\n        position: 'relative',\r\n        backgroundPosition: 'bottom'\r\n    }\r\n    let arrowStyle = {\r\n        transform: 'rotate('+_arrowRotation(p, myPlace)+'deg)',\r\n        left: '25%',\r\n        top: '25%',\r\n        width: '50%',\r\n        height: '50%',\r\n        zIndex: 8,\r\n        position: 'absolute'\r\n    }\r\n    let shipStyle={\r\n        left: '25%',\r\n        top: '25%',\r\n        width: '50%',\r\n        height: '50%',\r\n        zIndex: 5,\r\n        position: 'absolute',\r\n        border: 'none'\r\n    }\r\n    let shipCssClass = isMoving ? 'bobbing' : 'notbobbing'\r\n    let myShipIsHere = myShip && (myShip.placeId === p.placeId)\r\n    let inPortHere = myShipIsHere && (p.placeType === 'PORT')\r\n    return (\r\n        <div style={squareStyle} \r\n             key={p.placeId}\r\n             onClick={(inPortHere)? selectShipTab : moveHandler}\r\n        >\r\n            {p.placeType === 'PORT' ? p.name : ''}\r\n            {(myShipIsHere) ? <img className={shipCssClass} style={shipStyle} alt={myShip.shipName} src={imagesByType[myShip.shipType]} /> : <span> </span>} \r\n            {(isDestination && !isMoving) ? <img style={arrowStyle} src=\"img/arrow_up.png\" alt=\"You can move to here\" /> : <span> </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction _isDestination(place, myPlace, myShip) {\r\n    //True if they are one square apart (not diagonal), and place is a port or sea square,\r\n    // and you are not going overland from port to port\r\n    return (\r\n        (place.placeType === 'PORT' || place.placeType === 'AT_SEA' || myShip.isFlyer) && \r\n        (!(myPlace.placeType === 'PORT' && place.placeType === 'PORT') || myShip.isFlyer) &&\r\n        ((Math.abs(place.x - myPlace.x) + Math.abs(place.y - myPlace.y)) === 1)\r\n    )\r\n}\r\n\r\n//For a given place and the player's ships place, compute the degrees rotation\r\n// from verticle for an arrow pointing away from the ship.\r\nfunction _arrowRotation(place, myPlace) {\r\n    if (myPlace.y > place.y) {\r\n        return 0\r\n    }\r\n    if (myPlace.x > place.x) {\r\n        return 270\r\n    }\r\n    if (myPlace.x < place.x) {\r\n        return 90\r\n    }\r\n    //my y < y, arrow stays pointing up\r\n    return 180\r\n}\r\n\r\nconst timeContainerStyle = {\r\n    position: 'fixed',\r\n    top: '45px',\r\n    right: '0px',\r\n    zIndex: '5'\r\n}\r\nconst MobileMapPanelComponent = ({\r\n        ticks, days, ticksToday, places, myShip, myPlace, isMoving, moveShip, selectShipTab\r\n    }) => {\r\n    return (\r\n        <div style={mobileMapPanelStyle}>\r\n            <div style={timeContainerStyle}>\r\n                <TimeView days={days} ticksToday={ticksToday} />\r\n            </div>\r\n            <div style={mapStyle}>\r\n                {places.map((p)=>(<Square key={p.placeId} \r\n                                          p={p} \r\n                                          myShip={myShip} \r\n                                          myPlace={myPlace}\r\n                                          isMoving={isMoving}\r\n                                          isDestination={myShip && _isDestination(p, myPlace, myShip)}\r\n                                          moveShip={moveShip} \r\n                                          selectShipTab={selectShipTab}\r\n                                  />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  days: state.days,\r\n  ticks: state.ticks,\r\n  ticksToday: state.ticksToday,\r\n  places: state.places,\r\n  myShip: stateUtils.getMyShip(state),\r\n  myPlace: stateUtils.getCurrentPlace(state),\r\n  isMoving: state.isMoving\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    moveShip: (shipId, placeId) => { dispatch(actions.moveShip(shipId, placeId)) },\r\n    selectShipTab: () => { dispatch(actions.selectShipTab()) }\r\n  })\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MobileMapPanelComponent)","import React from 'react'\r\nimport PlacePanel from './place/PlacePanel'\r\nimport ShipPanel from './ship/ShipPanel'\r\nimport ShiplessPanel from './ship/ShiplessPanel'\r\nimport MapPanel from './MapPanel'\r\nimport MobileMapPanel from './MobileMapPanel'\r\nimport {seaBlue} from './styleConstants'\r\nimport {SCREEN_WIDTH_THRESHOLD} from './constants'\r\n\r\nconst mainPageStyle = {\r\n    display: 'grid',\r\n    gridTemplateColumns: '1fr 1fr 1fr',\r\n    padding: '0px'\r\n}\r\nconst mainPageStyleForMobile = {\r\n    background: seaBlue,\r\n    position: 'absolute',\r\n    top: '0px',\r\n    bottom: '0px',\r\n    width: '100%'\r\n}\r\nconst disabledButtonStyle = {\r\n    background: '#668',\r\n    fontWeight: 'bold',\r\n    fontSize: '30px',\r\n    width: '28%'\r\n}\r\nconst enabledButtonStyle = {\r\n    background: 'yellow',\r\n    fontWeight: 'bold',\r\n    fontSize: '30px',\r\n    width: '28%'\r\n}\r\nconst youarehereButtonStyle = {\r\n    background: seaBlue,\r\n    color: 'black',\r\n    fontWeight: 'bold',\r\n    fontSize: '30px',\r\n    border: 'none',\r\n    width: '28%'\r\n}\r\nconst helpButtonStyle = {\r\n    width: '16%',\r\n    background: seaBlue,\r\n    fontWeight: 'bold',\r\n    fontSize: '30px',\r\n    color: 'yellow',\r\n    border: 'none',\r\n}\r\nconst mobileNavStyle = {\r\n    position: 'fixed',\r\n    width: '100%',\r\n    top: '0px',\r\n    left: '0px',\r\n    zIndex: '10'\r\n}\r\n\r\nconst MainPage = ({\r\n    showWelcomePage, \r\n    hasShip, \r\n    isInPort, \r\n    screenWidth, \r\n    selectPortTab,\r\n    selectShipTab,\r\n    selectMapTab,\r\n    selectedTab\r\n}) => {\r\n    if (screenWidth >= SCREEN_WIDTH_THRESHOLD) {\r\n        return (\r\n            <div style={mainPageStyle}>\r\n                {isInPort ? <PlacePanel /> : <div style={{background:seaBlue}}> </div>}\r\n                {hasShip ? <ShipPanel /> : <ShiplessPanel />}\r\n                <MapPanel showWelcomePage={showWelcomePage} />\r\n            </div>\r\n        )\r\n    } else {\r\n        const portButtonStyle = (selectedTab === 'PORT') ? youarehereButtonStyle : enabledButtonStyle\r\n        const portButtonDisabled = selectedTab === 'PORT'\r\n\r\n        const shipButtonStyle = (selectedTab === 'SHIP') ? youarehereButtonStyle : \r\n            ( hasShip ? enabledButtonStyle : disabledButtonStyle)\r\n        const shipButtonDisabled = !hasShip || (selectedTab === 'SHIP')\r\n\r\n        const mapButtonStyle = (selectedTab === 'MAP') ? youarehereButtonStyle : enabledButtonStyle\r\n        const mapButtonDisabled = selectedTab === 'MAP'\r\n\r\n        return (\r\n            <div style={mainPageStyleForMobile}>\r\n                <div style={mobileNavStyle}>\r\n                    <button disabled={portButtonDisabled} \r\n                            onClick={selectPortTab}\r\n                            style={portButtonStyle}\r\n                    >Port</button>\r\n                    <button disabled={shipButtonDisabled} \r\n                            onClick={selectShipTab}\r\n                            style={shipButtonStyle}\r\n                    >Ship</button>\r\n                    <button disabled={mapButtonDisabled} \r\n                            onClick={selectMapTab}\r\n                            style={mapButtonStyle}\r\n                    >Map</button>\r\n                    <button style={helpButtonStyle} onClick={showWelcomePage}> ? </button>\r\n                </div>\r\n                <div style={{height:'40px'}}> </div>\r\n                {selectedTab === 'PORT' ?\r\n                  <PlacePanel /> : ( selectedTab === 'SHIP' ? \r\n                      <ShipPanel /> : <MobileMapPanel />)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport WelcomePage from './welcome/WelcomePage'\r\nimport MainPage from './MainPage'\r\nimport {showWelcomePage, startNewGame, selectPortTab, selectShipTab, selectMapTab, resetState} from './actions'\r\nimport * as stateUtils from './stateUtils'\r\n\r\n/*\r\n * This is the absolute top level component of this project.\r\n * It can dispay the WelcomePage component, the MainPage component for actually playing the game,\r\n * or a simple \"Game Over\" screen.\r\n * \r\n * This component is used by index.js.\r\n */\r\n\r\nconst AppComponent = ({\r\n    showingWelcomePage, \r\n    showWelcomePage, \r\n    hideWelcomePage, \r\n    hasShip, \r\n    isInPort, \r\n    gameOver, \r\n    gameOverMessage, \r\n    cash, \r\n    cashToWin, \r\n    startNewGame, \r\n    ticks, \r\n    days, \r\n    ticksToday,\r\n    screenWidth,\r\n    selectedTab,\r\n    selectPortTab,\r\n    selectShipTab,\r\n    selectMapTab,\r\n    resetState\r\n}) => {\r\n    if (gameOver) {\r\n        return (\r\n            <div className=\"App\" style={{textAlign:'center'}}>\r\n                <br /><br /><br />\r\n                <h1>Game Over: {gameOverMessage}</h1>\r\n                <button onClick={startNewGame}>Start a new game</button>\r\n            </div>\r\n        )\r\n    }\r\n    if (cash >= cashToWin) {\r\n        return (\r\n            <div className=\"App\" style={{textAlign:'center'}}>\r\n                <br /><br /><br />\r\n                <h1>Fifty thousand florins!</h1>\r\n                <h1>Achieved on day {days} at {ticksToday}:00.</h1>\r\n                <h1>You Win !!!!!!!!!!!!!!!!</h1>\r\n                <button onClick={startNewGame}>Start a new game</button>\r\n            </div>\r\n        )\r\n    }\r\n    if (showingWelcomePage) {\r\n        return (\r\n            <div className=\"App\">\r\n                <WelcomePage \r\n                    hideWelcomePage={hideWelcomePage} \r\n                    ticks={ticks} \r\n                    resetState={resetState} \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    return <div className=\"App\">\r\n        <MainPage \r\n            showWelcomePage={showWelcomePage} \r\n            hasShip={hasShip} \r\n            isInPort={isInPort} \r\n            screenWidth={screenWidth} \r\n            selectedTab={selectedTab}\r\n            selectPortTab={selectPortTab}\r\n            selectShipTab={selectShipTab}\r\n            selectMapTab={selectMapTab}\r\n        />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  showingWelcomePage: state.showingWelcomePage,\r\n  hasShip: !!state.myShipId,\r\n  isInPort: stateUtils.getCurrentPlace(state).placeType === 'PORT',\r\n  gameOver: state.gameOver,\r\n  gameOverMessage: state.gameOverMessage,\r\n  ticks: state.ticks,\r\n  days: state.days,\r\n  ticksToday: state.ticksToday,\r\n  cash: state.cash,\r\n  cashToWin: state.cashToWin,\r\n  screenWidth: state.screenWidth,\r\n  selectedTab: state.selectedTab //Which tab to show in mobile view\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  showWelcomePage: () => dispatch(showWelcomePage(true)),\r\n  hideWelcomePage: () => dispatch(showWelcomePage(false)),\r\n  startNewGame: () => dispatch(startNewGame()),\r\n  selectPortTab: () => dispatch(selectPortTab()),\r\n  selectShipTab: () => dispatch(selectShipTab()),\r\n  selectMapTab: () => dispatch(selectMapTab()),\r\n  resetState: () => dispatch(resetState())\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AppComponent)","import { shipyard } from './factories'\r\nimport places from './state0_places'\r\n\r\n/*\r\n * This is the initial state used by React/Redux.\r\n *\r\n * The top level of this object has info about:\r\n *     The player's character and ship\r\n *     Time in the game\r\n *     An array containing all the ship objects in the world\r\n *     An array containing all the cargo objects in the world\r\n *     An array of \"cargo producers\" which specify how often\r\n *             cargos of various types appear in various places\r\n *     An array of \"place\" objects, imported from state0_places.js.\r\n *        Each place objects defines a square on the map.\r\n */\r\n\r\nconst state0 = {\r\n    screenWidth: window.innerWidth, //updated every tick\r\n    showingWelcomePage: true,\r\n    selectedTab: 'PORT', //Whish of 'PORT', 'SHIP', or 'MAP' to show in mobile view.\r\n    timeStop: true,\r\n    slowTimeCounter: 0,\r\n    gameOver: false,\r\n    gameOverMessage: '',\r\n    ticks: 0,\r\n    days: 0,\r\n    ticksToday: 0,\r\n    isMoving: false,\r\n    moveEndTime: null,\r\n    cash: 800,\r\n    cashToWin: 50000,\r\n    currentPlaceId: 'portharbor',\r\n    defaultPlaceId: 'portharbor',\r\n    myShipId: null,\r\n    ships: [\r\n        shipyard('portharbor', 'fishboat', 'Fishy'),\r\n        shipyard('portharbor', 'albionsteamclipper', 'Clippy'),\r\n        shipyard('heck', 'enginebarge', 'Grummpy'),\r\n        shipyard('pointa', 'silverzeppelin', 'Puffy'),\r\n        shipyard('gibber', 'steamturbinehovercraft', 'Zippy'),\r\n    ],\r\n    places: places,\r\n    cargos: [\r\n        {isForSale: true, cargoId:'cargo1', cargoLabel: 'Olive Oil', cargoType: 'oliveoil', isLoaded: false, placeId: 'portharbor', shipId: null},\r\n        {isForSale: true, cargoId:'cargo2', cargoLabel: 'Kippers', cargoType: 'kippers', isLoaded: false, placeId: 'portharbor', shipId: null}\r\n    ],\r\n    cargoProducers: [\r\n        {placeId: 'portharbor', period: 3, cargoType: 'oliveoil', quantity: 1},\r\n        {placeId: 'gibber', period: 3, cargoType: 'fluff', quantity: 1},\r\n        {placeId: 'heck', period: 3, cargoType: 'coal', quantity: 1},\r\n        {placeId: 'portharbor', period: 3, cargoType: 'kippers', quantity: 1},\r\n        {placeId: 'pointa', period: 3, cargoType: 'clockworks', quantity: 1},\r\n        {placeId: 'thirdplace', period: 3, cargoType: 'leopardwood', quantity: 1},\r\n        {placeId: 'nether', period: 2, cargoType: 'coal', quantity: 1},\r\n    ]\r\n}\r\n\r\nexport default state0","import * as stateUtils from './stateUtils'\r\nimport * as factories from './factories'\r\n\r\nexport default function tickHandler(state) {\r\n    let newState = {...state}\r\n\r\n    //Check victory condition\r\n    if (newState.cash >= newState.cashToWin) {\r\n        newState.timeStop = true\r\n        return newState\r\n    }\r\n\r\n    //Slow time by 20x when in port or deciding where to move next at sea,\r\n    //    i.e. when state.isMoving is false.\r\n    if (!state.isMoving) {\r\n        if (state.slowTimeCounter <= 4) {\r\n            return {...state, slowTimeCounter: state.slowTimeCounter + 1}\r\n        } else {\r\n            newState.slowTimeCounter = 0\r\n        }\r\n    }\r\n\r\n    newState.screenWidth = window.innerWidth\r\n\r\n\r\n    //A day is 24 ticks.\r\n    //state contains ticks, days, and ticksToday for other logic to use.\r\n    //ticksToday rolls back to zero at the end of each day, like a clock. While ticks just\r\n    //  keeps rising.\r\n    newState = {...newState, ticks: state.ticks + 1, ticksToday: state.ticksToday + 1}\r\n    newState = doTickly(newState)\r\n    if (newState.ticksToday === 24) {\r\n        newState.days = newState.days + 1\r\n        newState.ticksToday = 0\r\n        newState = doDaily(newState)\r\n    }\r\n    return newState\r\n}\r\n\r\nfunction doTickly(s) {\r\n    return checkMoveCompleted(s)\r\n}\r\n\r\nfunction checkMoveCompleted(state) {\r\n    if (state.isMoving && (state.ticks >= state.moveEndTime)) {\r\n        return {...state, isMoving:false, moveEndTime:null}\r\n    } else {\r\n        return state\r\n    }\r\n}\r\n\r\nfunction doDaily(state) {\r\n    return producersProduce(eatFood(state))\r\n}\r\n\r\nfunction eatFood(s) {\r\n    let cash = s.cash\r\n    let currentPlace = stateUtils.getCurrentPlace(s)\r\n    let isFoodForSale = currentPlace.isFoodForSale\r\n    let foodPrice = isFoodForSale ? currentPlace.foodPrice : -1\r\n    //No ship. Player buys food for self each day.\r\n    if (!s.myShipId) {\r\n        if (isFoodForSale && (cash >= foodPrice)) {\r\n            return {...s, cash: cash - foodPrice}\r\n        } else {\r\n            return {...s, cash: cash - foodPrice, gameOver: true}\r\n        }\r\n    //Player has a ship...\r\n    } else {\r\n        let myShip = stateUtils.getMyShip(s)\r\n        //Assume ship always has a full crew\r\n        let crew = myShip.crewSize\r\n\r\n        //Loop once for each person in the crew. Try to get a food each time.\r\n        for (let crewPerson = 1; crewPerson <= crew; crewPerson++) {\r\n            if (myShip.food >= 1) {\r\n                myShip.food = myShip.food - 1\r\n                s = stateUtils.replaceShip(myShip, s)\r\n            } else {\r\n                if (isFoodForSale && (cash >= foodPrice)) {\r\n                    s = {...s, cash: cash - foodPrice}\r\n                } else {\r\n                    s = {...s, gameOver: true, gameOverMessage: 'You starved.'}\r\n                }\r\n            }\r\n        }\r\n        return s\r\n    }\r\n}\r\n\r\n//Powers state.cargoProducers, which look like:\r\n//    {placeId: 'portharbor', period: 2, cargoType: 'oliveoil', quantity: 1}\r\n//Updates state.cargos, which look like:\r\n//    {isForSale: true, cargoId:'cargo1', cargoLabel: 'Olive Oil', \r\n//       cargoType: 'oliveoil', cargoPrice: 50, isLoaded: false, placeId: 'portharbor', \r\n//       shipId: null},\r\nfunction producersProduce(oldState) {\r\n    let newCargos = [ ...oldState.cargos]\r\n    oldState.cargoProducers.forEach((p)=>{\r\n        if (!(oldState.days % p.period)) {\r\n            for (let i = 0; i < p.quantity; i++) {\r\n                newCargos.push(factories.cargoFactory(p.cargoType, p.placeId))\r\n            }\r\n        }\r\n    })\r\n    return {...oldState, cargos: newCargos}\r\n}\r\n\r\n","import state0 from './state0'\r\nimport * as stateUtils from './stateUtils'\r\nimport tickHandler from './tickHandler'\r\n\r\n/*\r\n * Redux reducer function\r\n*/\r\n\r\nfunction rootReducer(state = state0, action) {\r\n\r\n    //See actions. Might remove this later.\r\n    //But never show TICKs. There are too many.\r\n    if (action.type !== 'TICK') {\r\n        //console.log(action)\r\n        //console.log(state)\r\n    }\r\n    \r\n    switch (action.type) {\r\n\r\n        //Note: The convention is that get functions in stateUtils return shallow copies, not objects from state\r\n        //  and replace functions expect new objects that can be safely returned from the reducer\r\n\r\n        case 'TICK':\r\n            if (state.timeStop) {\r\n                return state\r\n            }\r\n            return tickHandler(state)\r\n\r\n  \t    case 'SHOW_WELCOME_PAGE':\r\n            return {...state, showingWelcomePage: action.showing, timeStop: action.showing}\r\n\r\n        case 'START_NEW_GAME':\r\n            return state0\r\n\r\n        case 'SELECT_TAB':\r\n            return {...state, selectedTab: action.whichTab}\r\n\r\n        case 'BUY_SHIP':\r\n            let ship = stateUtils.getShipById(action.shipId, state)\r\n            let oldShip = stateUtils.getMyShip(state)\r\n            let newCash = state.cash + (oldShip?oldShip.basePrice:0) - ship.basePrice\r\n            //Abort if I don't have the money.\r\n            if (newCash < 0) {\r\n                return state\r\n            }\r\n            ship.isForSale = false\r\n            let newState = stateUtils.replaceShip(ship, state)\r\n            newState.myShipId = ship.shipId\r\n            newState.cash = newCash\r\n            if (oldShip) {\r\n                oldShip.isForSale = true\r\n                newState = stateUtils.replaceShip(oldShip, newState)\r\n            }\r\n            return newState\r\n\r\n        case 'BUY_FOOD': { //action.placeId, action.quantity\r\n            let myShip = stateUtils.getMyShip(state)\r\n            //Bail out if there's no room for more food\r\n            if (myShip.food + action.quantity > myShip.maxFood) {\r\n                return state\r\n            }\r\n            //Bail if you can't afford it\r\n            let newCash = state.cash - stateUtils.getCurrentPlace(state).foodPrice * action.quantity\r\n            if (newCash < 0) {\r\n                return state\r\n            }\r\n            //Add food to your ship\r\n            myShip.food += action.quantity\r\n            let newState = stateUtils.replaceShip(myShip, state)\r\n            newState.cash = newCash\r\n            return newState\r\n        }\r\n\r\n        case 'BUY_FUEL': { //action.placeId, action.quantity\r\n            let myShip = stateUtils.getMyShip(state)\r\n            //Bail out if there's no room for more fuel\r\n            if (myShip.fuel + action.quantity > myShip.maxFuel) {\r\n                return state\r\n            }\r\n            //Bail if you can't afford it\r\n            let newCash = state.cash - stateUtils.getCurrentPlace(state).fuelPrice * action.quantity\r\n            if (newCash < 0) {\r\n                return state\r\n            }\r\n            //Add food to your ship\r\n            myShip.fuel += action.quantity\r\n            let newState = stateUtils.replaceShip(myShip, state)\r\n            newState.cash = newCash\r\n            return newState\r\n        }\r\n\r\n        case 'BUY_CARGO': {\r\n            let cargo = stateUtils.getCargoById(action.cargoId, state)\r\n            let newCash = state.cash - stateUtils.getPlaceById(cargo.placeId, state).prices[cargo.cargoType]\r\n            if (newCash <= 0) {\r\n                return state\r\n            }\r\n            cargo.isForSale = false\r\n            cargo.isLoaded = true\r\n            cargo.placeId = null\r\n            cargo.shipId = stateUtils.getMyShip(state).shipId\r\n            let newState = stateUtils.replaceCargo(cargo, state)\r\n            newState.cash = newCash\r\n            return newState\r\n        }\r\n\r\n        case 'MOVE_SHIP': {\r\n            //action.shipId, action.placeId\r\n            \r\n            //You can't start a new move until the current move finishes\r\n            if (state.isMoving) {\r\n                return state\r\n            }\r\n            let newShip = stateUtils.getShipById(action.shipId, state)\r\n            //Bail if we don't have enough fuel\r\n            if (newShip.fuel < newShip.fuelPerMove) {\r\n                return state;\r\n            }\r\n            let newState = {...state, isMoving:true, moveEndTime:state.ticks+(24/newShip.speed)}\r\n            //If player is aboard, the player also moves.\r\n            if (newState.myShipId === action.shipId) {\r\n                newState.currentPlaceId = action.placeId\r\n            }\r\n            newShip.placeId = action.placeId\r\n            newShip.fuel -= newShip.fuelPerMove\r\n            let newerState = stateUtils.replaceShip(newShip, newState)\r\n            return newerState\r\n        }\r\n\r\n        case 'SELL_CARGO': {\r\n            let cargo = stateUtils.getCargoById(action.cargoId, state)\r\n            let newCash = state.cash + stateUtils.getCurrentPlace(state).prices[cargo.cargoType]\r\n            let newState = stateUtils.removeCargo(cargo, state)\r\n            newState.cash = newCash\r\n            return newState\r\n        }\r\n\r\n        case 'RESET_STATE': {\r\n            return state0\r\n        }\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport state0 from './state0'\r\nimport rootReducer from './rootReducer'\r\nimport { tick } from './actions'\r\n\r\nimport {loadState, saveState} from './gameSaver'\r\n\r\n//Get state from local storage\r\nconst persistedState = loadState()\r\n\r\n//Create a store using state from local storage if we have it, or state0 from state0.js otherwise.\r\nconst store = createStore(rootReducer, ((persistedState && persistedState.places)?persistedState:state0))\r\nstore.subscribe(() => {\r\n    let s = store.getState()\r\n    //store state once per day.\r\n    if (s.ticksToday === 0) {\r\n      saveState(s)\r\n    }\r\n  })\r\n  \r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n//TICK actions drive everything that depends on the passage of time\r\nsetInterval(()=>{store.dispatch(tick())}, 150)\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n","/*\r\n * Module for storing game state in the browsers localStorage\r\n */\r\n\r\n\r\n/*\r\n * Add a version number to the key used to store the state,\r\n * so we can change the format and not break because there\r\n * was already state stored in the old and incompatable format.\r\n */\r\nconst STORED_STATE_VERSION = 1.0\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem('tradingGame' + STORED_STATE_VERSION);\r\n      if (serializedState === null) {\r\n        return undefined;\r\n      }\r\n      return JSON.parse(serializedState);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  export const saveState = (state) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state);\r\n      localStorage.setItem('tradingGame' + STORED_STATE_VERSION, serializedState);\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  }\r\n\r\n"],"sourceRoot":""}